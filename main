import queue
import sys
import os
from enum import Enum
import time
import queue
import math
from typing import List, Dict, Optional

# main.py: Slut project om träningslogg en applikation där 
# användaren kan registrera sina träningspass, beräkna BMI, 
# registrera dagligt kaloriintag och spåra kaloriförbrukning. 


__author__  = "Ott Rudolf Pold"
__version__ = "3.0.0"
__email__   = "ott.pold@elev.ga.ntig.se"

# innehåller allt info om användaren
class User:
    def __init__(self):
        self.name = ""
        self.gender = ""
        self.age = 0
        self.height = 0.0
        self.weight = 0.0
        self.bmi = 0.0
        self.user_information = []

    def set_name(self):
        self.name = input("-Enter your First Name: ")
        self.user_information.append(f"Your name is: {self.name}")

    def set_gender(self):
        self.gender = input("\n-Enter your Gender (male/female): ").lower()
        while self.gender not in ["male", "female"]:
            print("\033[31mX Invalid Gender X\nPlease re-enter gender:\033[0m", end=" ")
            self.gender = input().lower()
        self.user_information.append(f"Your gender is: {self.gender}")
    
    def set_age(self):
        self.age = int(input("\n-Enter your Age: "))
        self.user_information.append(f"Your age is: {self.age} years old")
    
    def set_height(self):
        self.height = float(input("\n-Enter your Height (meters): "))
        self.user_information.append(f"Your height is: {self.height} m")
    
    def set_weight(self):
        self.weight = float(input("\n-Enter your Weight (kg): "))
        self.user_information.append(f"Your Weight is: {self.weight} Kg")
    
    
    # calculerar bmi och förkortar detta till en decimal tal
    def calculate_bmi(self):
        if self.height > 0: 
            bmi = self.weight / (self.height**2)
            self.bmi = math.floor(bmi * 10) / 10
        else:
            self.bmi = 0.0
        return self.bmi


    def update_name(self):
        old_name = self.name
        self.name = input("Enter your name: ")
        for i, info in enumerate(self.user_information):
            if info == f"Your name is: {old_name}":
                self.user_information[i] = f"Your name is: {self.name}"
                break
    
    def update_weight(self):
        old_weight = self.weight
        self.weight = float(input("Enter your Weight (Kg): "))
        for i, info in enumerate(self.user_information):
            if info == f"Your Weight is: {old_weight} Kg":
                self.user_information[i] = f"Your Weight is: {self.weight} Kg"
                break
        self.calculate_bmi()
    
    def update_height(self):
        old_height = self.height
        self.height = float(input("Enter your Height (meters): "))
        for i, info in enumerate(self.user_information):
            if info == f"Your height is: {old_height} m":
                self.user_information[i] = f"Your height is: {self.height} m"
                break
        self.calculate_bmi()
    
    def update_age(self):
        old_age = self.age
        self.age = int(input("Enter Your Age: "))
        for i, info in enumerate(self.user_information):
            if info == f"Your age is: {old_age} years old":
                self.user_information[i] = f"Your age is: {self.age} years old"
                break
        self.calculate_bmi()
    
    def update_gender(self):
        old_gender = self.gender
        self.gender = input("Enter Your Gender (male/female): ").lower()
        while self.gender not in ["male", "female"]:
            print("\033[31mX Invalid Gender X\nPlease re-enter gender:\033[0m", end=" ")
            self.gender = input().lower()
        for i, info in enumerate(self.user_information):
            if info == f"Your gender is: {old_gender}":
                self.user_information[i] = f"Your gender is: {self.gender}"
                break
    
    def display_profile(self):
        print(f"\033[34;47m> {self.name}'s Profile\033[0m\n")
        for info in self.user_information:
            print(f"-{info}")    

    
    

class Nutrition:
    def __init__(self, user: User):
        self.user = user
        self.calorie_intake = 0
        self.water_intake = 0.0
        self.protein_intake = 0
        self.hours_slept = 0
        self.meal_plan = queue.Queue()
        self.nutrition_facts = {
            "chicken": (165, 31),
            "beef": (250, 26),
            "eggs": (155, 13)
        }
    def add_meals(self, name: str, calories: int, protein: int):
        self.nutrition_facts[name] = (calories, protein)

    def set_calorie_intake():
        return
    
    def set_water_intake():
        return
    
    def set_protein_intake():
        return
    
    def set_remaining_cnp():
        return
    
    def set_hours_slept():
        return
    
    def add_to_meal_plan():
        return
    
    def remove_from_meal_plan():
        return
    
    def print_meals():
        return
    
    def print_meal_plan():
        return
    
    def clear():
        return
    
    def access_front_element():
        return
    
    def set_burned_calories():
        return

class Exercise:
    def __init__(self, name: str, muscle_group: str, calories_burn: int, sets: int, reps: int):
        self.name = name
        self.muscle_group = muscle_group
        self.calories_burn = calories_burn
        self.sets = sets
        self.reps = reps

class WorkoutRoutine:
    def __init__(self):
        self.exercises = []

class FitnessGoal(Enum):
    STRENGTH = "strength"
    VOLUME = "volume"
    ENDURANCE = "endurance"

class StrengthLevel(Enum):
    BEGINNER = "beginner"
    INTERMEDIATE = "intermediate"
    ADVANCED = "advanced"

class Workout:
    def __init__(self):
        self.beginner_workouts = {}
        self.intermediate_workouts = {}
        self.advanced_workouts = {}
        self.workout_queue = queue.Queue()
        self.user_fitness_goal = None
        self.user_strength_level = None

        self.predefine_workouts()
    
    def predefine_workouts(self):

        #Nybörjare
        self.beginner_workouts = {
            "strength": {
                "chest": [
                    Exercise("Traditional Push-up", "chest", 100, 3, 8)
                ]
            },
            "volume": {
                "chest": [
                    Exercise("Traditional Push-up", "chest", 100, 4, 10)
                ]
            },
            "endurance": {
                "chest": [
                    Exercise("Traditional Push-up", "chest", 110, 3, 12)
                ]
            }
        }

        #Intermediate
        self.intermediate_workouts

        #Expert
        self.advanced_workouts

    def set_user_fitness_goal():
        return
    
    def set_user_strength_level():
        return
    
    def get_exercises():
        return
    
    def select_and_queue_exercises():
        return
    
    def add_gym_activity_to_queue():
        return
    
    def execute_workout_queue():
        return
    
    def calculate_calories():
        return
    
    def update_calorie_intake_non_gym():
        return
    
    def calculate_total_calories_burned_gym():
        return
    



def update_profile_menu(user: User, nutrition: Nutrition):

    while True:
        os.system('cls' if os.name == 'nt' else 'clear')
        print("\033[30;43mFITNESS TRACKER\033[1;0m")
        print("\033[34;47m> Update Profile\033[1;0m\n")
        print("\033[33mChoose what you want to update:\033[1;0m")
        print("1. Update Name")
        print("2. Update Weight")
        print("3. Update Height")
        print("4. Update Age")
        print("5. Update Gender")
        print("0. \033[31mGo Back\033[0m\n")
        print("--> ", end="")
        
        try:
            choice = int(input())
        except ValueError:
            print("\033[31mX Invalid choice X\033[1;0m")
            print("\033[31mPlease Try Again\033[1;0m")
            time.sleep(2)
            continue
        
        if choice == 1:
            print("Enter your name: ", end="")
            user.update_name()
            print("\033[32mName Successfully Updated!\033[0m")
            time.sleep(1)
        
        elif choice == 2:
            print("Enter your Weight \033[33m(Kg)\033[0m: ", end="")
            user.update_weight()
            print("\033[32mWeight Successfully Updated!\033[0m")
            time.sleep(1)
        
        elif choice == 3:
            print("Enter your Height \033[33m(meters)\033[0m: ", end="")
            user.update_height()
            print("\033[32mHeight Successfully Updated!\033[0m")
            time.sleep(1)
        
        elif choice == 4:
            print("Enter Your Age: ", end="")
            user.update_age()
            print("\033[32mAge Successfully Updated!\033[0m")
            time.sleep(1)
        
        elif choice == 5:
            print("Enter Your Gender \033[33m(male/female)\033[0m: ", end="")
            user.update_gender()
            print("\033[32mGender Successfully Updated!\033[0m")
            time.sleep(1)
        
        elif choice == 0:
            os.system('cls' if os.name == 'nt' else 'clear')
            break
        
        else:
            print("\033[31mX Invalid choice X\033[1;0m")
            print("\033[31mPlease Try Again\033[1;0m")
            time.sleep(2)

def nutrition_help_menu():
    return

def meal_plan_menu():
    return

def what_you_ate_menu():
    return

def workout_plan_menu():
    return

def walking_menu():
    return

def running_menu():
    return

def swimming_menu():
    return

def cycling_menu():
    return

def gym_training_menu():
    return

def main():
    user = User()
    nutrition = Nutrition(user)
    workout = Workout()
    
    # Welcome msg
    print("\033[32mWELCOME to your fitness journey!")
    print("Please enter the below information for us to help you get started!\033[0m\n")
    
    # Register användare
    user.set_name()
    user.set_gender()
    user.set_age()
    user.set_height()
    user.set_weight()
    user.calculate_bmi()

    # nutrition info
    nutrition.set_calorie_intake()
    nutrition.set_protein_intake()
    nutrition.set_water_intake()
    

    os.system('cls' if os.name == 'nt' else 'clear')
        
    while True:
        print("\033[30;43mFITNESS TRACKER\033[1;0m\n")
        print("\033[33mChoose what you want to do:(enter the number)\033[1;0m")
        print("1. Display Profile")
        print("2. Update Profile")
        print("3. Get Nutrition Help")
        print("4. Get a Workout Plan")
        print("5. Execute Workout")
        print("0. \033[31mExit program\033[0m\n")
        print("--> ", end="")
        
        try:
            choice = int(input())
        except ValueError:
            print("\033[31mX Invalid choice X\033[1;0m")
            print("\033[31mPlease Try Again\033[1;0m")
            time.sleep(2)
            os.system('cls' if os.name == 'nt' else 'clear')
            continue
        
        if choice == 1:
            os.system('cls' if os.name == 'nt' else 'clear')
            print("\033[30;43mFITNESS TRACKER\033[1;0m")
            User.display_profile()
            print("\n\033[33m>>> Press 0 to Continue:\033[0m ", end="")
            input()
            os.system('cls' if os.name == 'nt' else 'clear')
        
        elif choice == 2:
            update_profile_menu(user, nutrition)
        
        elif choice == 3:
            nutrition_help_menu(user, nutrition)
        
        elif choice == 4:
            workout_plan_menu(user, workout)
        
        elif choice == 5:
            os.system('cls' if os.name == 'nt' else 'clear')
            print("\033[30;43mFITNESS TRACKER\033[1;0m")
            print("\033[34;47m>> WORKOUT EXECUTION\033[1;0m\n")
            
            calories_burned = workout.calculate_total_calories_burned_gym()
            nutrition.set_burned_calories(calories_burned)
            
            workout.execute_workout_queue()
        
        elif choice == 0:
            print("\n\033[32mTHANK YOU for using Fitness Tracker.\033[0m")
            print("\033[31mExiting...\033[0m")
            time.sleep(4)
            os.system('cls' if os.name == 'nt' else 'clear')
            break
        
        else:
            print("\033[31mX Invalid choice X\033[1;0m")
            print("\033[31mPlease Try Again\033[1;0m")
            time.sleep(2)
            os.system('cls' if os.name == 'nt' else 'clear')

if __name__ == "__main__":
    main()