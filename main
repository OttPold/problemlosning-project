import queue
import sys
import os
from enum import Enum
import time
import queue
import math
from typing import List, Dict, Optional

# main.py: Slut project om träningslogg en applikation där 
# användaren kan registrera sina träningspass, beräkna BMI, 
# registrera dagligt kaloriintag och spåra kaloriförbrukning. 


__author__  = "Ott Rudolf Pold"
__version__ = "4.0.0"
__email__   = "ott.pold@elev.ga.ntig.se"

# innehåller allt info om användaren
class User:
    def __init__(self): # Initierar användarattribut
        self.name = ""
        self.gender = ""
        self.age = 0
        self.height = 0.0
        self.weight = 0.0
        self.bmi = 0.0
        self.user_information = [] # Lista för att lagra användarinformation

    def set_name(self): # Sätter användarens namn
        self.name = input("-Enter your First Name: ")
        self.user_information.append(f"Your name is: {self.name}")

    def set_gender(self): # Sätter kön
        self.gender = input("\n-Enter your Gender (male/female): ").lower()
        while self.gender not in ["male", "female"]:
            print("\033[31mX Invalid Gender X\nPlease re-enter gender:\033[0m", end=" ")
            self.gender = input().lower()
        self.user_information.append(f"Your gender is: {self.gender}")
    
    def set_age(self): # Sätter ålder
        self.age = int(input("\n-Enter your Age: "))
        self.user_information.append(f"Your age is: {self.age} years old")
    
    def set_height(self): # Sätter längd
        self.height = float(input("\n-Enter your Height (meters): "))
        self.user_information.append(f"Your height is: {self.height} m")
    
    def set_weight(self): # Sätter vikt
        self.weight = float(input("\n-Enter your Weight (kg): "))
        self.user_information.append(f"Your Weight is: {self.weight} Kg")
    
    def calculate_bmi(self): # calculerar bmi och förkortar detta till en decimal tal
        if self.height > 0: 
            bmi = self.weight / (self.height**2)
            self.bmi = math.floor(bmi * 10) / 10
        else:
            self.bmi = 0.0
        return self.bmi

    def update_name(self): # uppdaterar namn
        old_name = self.name
        self.name = input("Enter your name: ")
        for i, info in enumerate(self.user_information):
            if info == f"Your name is: {old_name}":
                self.user_information[i] = f"Your name is: {self.name}"
                break
    
    def update_weight(self): # uppdaterar vikt
        old_weight = self.weight
        self.weight = float(input("Enter your Weight (Kg): "))
        for i, info in enumerate(self.user_information):
            if info == f"Your Weight is: {old_weight} Kg":
                self.user_information[i] = f"Your Weight is: {self.weight} Kg"
                break
        self.calculate_bmi()
    
    def update_height(self): # uppdaterar längd
        old_height = self.height
        self.height = float(input("Enter your Height (meters): "))
        for i, info in enumerate(self.user_information):
            if info == f"Your height is: {old_height} m":
                self.user_information[i] = f"Your height is: {self.height} m"
                break
        self.calculate_bmi()
    
    def update_age(self): # uppdaterar ålder
        old_age = self.age
        self.age = int(input("Enter Your Age: "))
        for i, info in enumerate(self.user_information):
            if info == f"Your age is: {old_age} years old":
                self.user_information[i] = f"Your age is: {self.age} years old"
                break
        self.calculate_bmi()
    
    def update_gender(self): # uppdaterar kön
        old_gender = self.gender
        self.gender = input("Enter Your Gender (male/female): ").lower()
        while self.gender not in ["male", "female"]:
            print("\033[31mX Invalid Gender X\nPlease re-enter gender:\033[0m", end=" ")
            self.gender = input().lower()
        for i, info in enumerate(self.user_information):
            if info == f"Your gender is: {old_gender}":
                self.user_information[i] = f"Your gender is: {self.gender}"
                break
    
    def display_profile(self): # Visar användarens profil
        print(f"\033[34;47m> {self.name}'s Profile\033[0m\n")
        for info in self.user_information:
            print(f"-{info}")    


class Nutrition:
    def __init__(self, user: User): # Initierar näringsattribut
        self.user = user
        self.calorie_intake = 0
        self.water_intake = 0.0
        self.protein_intake = 0
        self.hours_slept = 0
        self.meal_plan = queue.Queue() # Kö för måltidsplan
        self.nutrition_facts = { # Dictionary för matvaror och deras näringsvärden
            "chicken": (165, 31),
            "beef": (250, 26),
            "eggs": (155, 13)
        }

    def add_meals(self, name: str, calories: int, protein: int): # Lägger till måltider
        self.nutrition_facts[name] = (calories, protein)

    def set_calorie_intake(self): # Beräknar kaloriintag baserat på kön, ålder och BMI
        gender = self.person.gender
        age = self.person.age
        bmi = self.person.bmi
        
        if gender == "male": # Beräkning för män
            if 9 <= age <= 13:
                if bmi < 18.5:   # undervikt
                    self.calorie_intake = 2000
                elif 18.5 <= bmi <= 24.9:   # normalvikt
                    self.calorie_intake = 1800
                elif 25 <= bmi <= 29.9:   # övervikt
                    self.calorie_intake = 1600
                elif bmi >= 30:   # fetma
                    self.calorie_intake = 1500
            elif 14 <= age <= 18:
                if bmi < 18.5: # undervikt
                    self.calorie_intake = 2500
                elif 18.5 <= bmi <= 24.9: # normalvikt
                    self.calorie_intake = 2200
                elif 25 <= bmi <= 29.9: # övervikt
                    self.calorie_intake = 1800
                elif bmi >= 30: # fetma
                    self.calorie_intake = 1600
            elif 19 <= age <= 30:
                if bmi < 18.5: # undervikt
                    self.calorie_intake = 2600
                elif 18.5 <= bmi <= 24.9: # normalvikt
                    self.calorie_intake = 2200
                elif 25 <= bmi <= 29.9: # övervikt
                    self.calorie_intake = 2000
                elif bmi >= 30: # fetma
                    self.calorie_intake = 1800
            elif 31 <= age <= 50:
                if bmi < 18.5: # undervikt
                    self.calorie_intake = 2200
                elif 18.5 <= bmi <= 24.9: # normalvikt
                    self.calorie_intake = 2000
                elif 25 <= bmi <= 29.9: # övervikt
                    self.calorie_intake = 1800
                elif bmi >= 30: # fetma
                    self.calorie_intake = 1700
            elif age >= 51:
                if bmi < 18.5: # undervikt
                    self.calorie_intake = 2200
                elif 18.5 <= bmi <= 24.9: # normalvikt
                    self.calorie_intake = 2000
                elif 25 <= bmi <= 29.9: # övervikt
                    self.calorie_intake = 2000
                elif bmi >= 30: # fetma
                    self.calorie_intake = 1800
        elif gender == "female": # Beräkning för kvinna
            if 9 <= age <= 13:
                if bmi < 18.5: # undervikt
                    self.calorie_intake = 1700
                elif 18.5 <= bmi <= 24.9: # normalvikt
                    self.calorie_intake = 1500
                elif bmi >= 25: # övervikt
                    self.calorie_intake = 1400
            elif 14 <= age <= 18: 
                if bmi < 18.5: # undervikt
                    self.calorie_intake = 2100
                elif 18.5 <= bmi <= 24.9: # normalvikt
                    self.calorie_intake = 1900
                elif 25 <= bmi <= 29.9: # övervikt
                    self.calorie_intake = 1800
                elif bmi >= 30:  # fetma
                    self.calorie_intake = 1600
            elif 19 <= age <= 30:
                if bmi < 18.5: # undervikt
                    self.calorie_intake = 2200
                elif 18.5 <= bmi <= 24.9: # normalvikt
                    self.calorie_intake = 2000
                elif 25 <= bmi <= 29.9: # övervikt
                    self.calorie_intake = 1800
                elif bmi >= 30:  # fetma
                    self.calorie_intake = 1700
            elif 31 <= age <= 50:
                if bmi < 18.5: # undervikt
                    self.calorie_intake = 2000
                elif 18.5 <= bmi <= 24.9: # normalvikt
                    self.calorie_intake = 1800
                elif bmi >= 25: # övervikt
                    self.calorie_intake = 1700 
            elif age >= 51:
                if bmi < 18.5: # undervikt
                    self.calorie_intake = 1900
                elif 18.5 <= bmi <= 24.9: # normalvikt
                    self.calorie_intake = 1800
                elif 25 <= bmi <= 29.9: # övervikt
                    self.calorie_intake = 1600
                elif bmi >= 30:  # fetma
                    self.calorie_intake = 1400
    
    def set_water_intake(self): # Beräknar vattenintag (1kg = 2.205 pounds och 1 oz = 0.0295735296 liter)
        self.water_intake = (self.person.weight * 2.205) * 0.0295735296
    
    def set_protein_intake(self): # Beräknar proteinintag
        self.protein_intake = self.person.weight * 0.8
    
    def set_remaining_cnp(self, food_name: str): # uppdaterar återstående kalorier och protein
        if food_name in self.nutrition_facts:
            calories, protein = self.nutrition_facts[food_name]
            self.calorie_intake -= calories
            self.protein_intake -= protein
    
    def set_hours_slept(self, hours: int): # Sätter sov timar
        self.hours_slept = hours
    
    def add_to_meal_plan(self, food_name: str): # Lägger till måltid i måltidsplanen
        if food_name in self.nutrition_facts:
            self.meal_plan.put(food_name)
    
    def remove_from_meal_plan(self): # Tar bort måltid från måltidsplanen
        if not self.meal_plan.empty():
            self.meal_plan.get()
    
    def print_meals(self):  # Skriver ut alla tillgängliga måltider
        for i, (food, (calories, protein)) in enumerate(self.nutrition_facts.items(), 1):
            print(f"{i}. {food}: {calories} Calories {protein} g of Protein")
    
    def print_meal_plan(self): # Skriver ut måltidsplanen
        temp_queue = queue.Queue()
        counter = 1
        
        while not self.meal_plan.empty():
            item = self.meal_plan.get()
            print(f"{counter}. {item}")
            temp_queue.put(item)
            counter += 1
        
        # Återställer måltidsplanen
        while not temp_queue.empty():
            self.meal_plan.put(temp_queue.get())
    
    def clear(self): # Rensar måltidsplanen och återställa näringsvärden
        while not self.meal_plan.empty():
            self.meal_plan.get()
        self.set_calorie_intake()
        self.set_protein_intake()
        self.set_water_intake()
    
    def access_front_element(self) -> Optional[str]: # Hämtar första elementet i måltidsplanen
        if not self.meal_plan.empty():
            return self.meal_plan.queue[0]
        return None
    
    def set_burned_calories(self, calories_burned: float): # Justerar kaloriintag efter förbrända kalorier
        self.calorie_intake += calories_burned


class Exercise: # Klass för att representera övningar
    def __init__(self, name: str, muscle_group: str, calories_burn: int, sets: int, reps: int):
        self.name = name # Övningens namn
        self.muscle_group = muscle_group # Muskelgrupp
        self.calories_burn = calories_burn # Kaloriförbrukning
        self.sets = sets # Antal set
        self.reps = reps # Antal repetitioner
 

class WorkoutRoutine: # Klass för att representera träningspass
    def __init__(self):
        self.exercises = [] # Lista över övningar


class FitnessGoal(Enum): # Enum för träningsmål
    STRENGTH = "strength"
    VOLUME = "volume"
    ENDURANCE = "endurance"


class StrengthLevel(Enum): # Enum för styrkenivå
    BEGINNER = "beginner"
    INTERMEDIATE = "intermediate"
    ADVANCED = "advanced"


class Workout: # Huvudklass för träningsfunktionalitet
    def __init__(self):
        self.beginner_workouts = {} # Övningar för nybörjare
        self.intermediate_workouts = {}  # Övningar för medelnivå
        self.advanced_workouts = {} # Övningar för avancerade
        self.workout_queue = queue.Queue() # Kö för träningspass
        self.user_fitness_goal = None # Användarens träningsmål
        self.user_strength_level = None # Användarens styrkenivå

        self.predefine_workouts() # Skapa fördefinierade övningar
    
    def predefine_workouts(self): # Fördefinierade övningar för olika nivåer och mål

        #Nybörjare
        self.beginner_workouts = {
            "strength": {
                "chest": [
                    Exercise("Traditional Push-up", "chest", 100, 3, 8)
                ]
            },
            "volume": {
                "chest": [
                    Exercise("Traditional Push-up", "chest", 100, 4, 10)
                ]
            },
            "endurance": {
                "chest": [
                    Exercise("Traditional Push-up", "chest", 110, 3, 12)
                ]
            }
        }

        #Intermediate
        self.intermediate_workouts

        #Expert
        self.advanced_workouts

    def set_user_fitness_goal(): 
        return
    
    def set_user_strength_level():
        return
    
    def get_exercises():
        return
    
    def select_and_queue_exercises():
        return
    
    def add_gym_activity_to_queue():
        return
    
    def execute_workout_queue():
        return
    
    def calculate_calories():
        return
    
    def update_calorie_intake_non_gym():
        return
    
    def calculate_total_calories_burned_gym():
        return
    


def update_profile_menu(user: User, nutrition: Nutrition):

    while True:
        os.system('cls' if os.name == 'nt' else 'clear')
        print("\033[30;43mFITNESS TRACKER\033[1;0m")
        print("\033[34;47m> Update Profile\033[1;0m\n")
        print("\033[33mChoose what you want to update:\033[1;0m")
        print("1. Update Name")
        print("2. Update Weight")
        print("3. Update Height")
        print("4. Update Age")
        print("5. Update Gender")
        print("0. \033[31mGo Back\033[0m\n")
        print("--> ", end="")
        
        try:
            choice = int(input())
        except ValueError:
            print("\033[31mX Invalid choice X\033[1;0m")
            print("\033[31mPlease Try Again\033[1;0m")
            time.sleep(2)
            continue
        
        if choice == 1:
            print("Enter your name: ", end="")
            user.update_name()
            print("\033[32mName Successfully Updated!\033[0m")
            time.sleep(1)
        
        elif choice == 2:
            print("Enter your Weight \033[33m(Kg)\033[0m: ", end="")
            user.update_weight()
            print("\033[32mWeight Successfully Updated!\033[0m")
            time.sleep(1)
        
        elif choice == 3:
            print("Enter your Height \033[33m(meters)\033[0m: ", end="")
            user.update_height()
            print("\033[32mHeight Successfully Updated!\033[0m")
            time.sleep(1)
        
        elif choice == 4:
            print("Enter Your Age: ", end="")
            user.update_age()
            print("\033[32mAge Successfully Updated!\033[0m")
            time.sleep(1)
        
        elif choice == 5:
            print("Enter Your Gender \033[33m(male/female)\033[0m: ", end="")
            user.update_gender()
            print("\033[32mGender Successfully Updated!\033[0m")
            time.sleep(1)
        
        elif choice == 0:
            os.system('cls' if os.name == 'nt' else 'clear')
            break
        
        else:
            print("\033[31mX Invalid choice X\033[1;0m")
            print("\033[31mPlease Try Again\033[1;0m")
            time.sleep(2)

def nutrition_help_menu(user: User, nutrition: Nutrition):
    while True:
        os.system('cls' if os.name == 'nt' else 'clear')
        print("\033[30;43mFITNESS TRACKER\033[1;0m")
        print("\033[34;47m> Nutrition Help\033[1;0m\n")
        print("\033[33mChoose one of the following operations:\033[0m")
        print("1. Calorie Intake")
        print("2. Protein Intake")
        print("3. Sleeping Hours")
        print("4. Meal Plan")
        print("5. New Day")
        print("0. \033[31mGo Back\033[0m\n")
        print("--> ", end="")
        
        try:
            choice = int(input())
        except ValueError:
            print("\033[31mX Invalid choice X\033[1;0m")
            print("\033[31mPlease Try Again\033[1;0m")
            time.sleep(2)
            continue
        
        if choice == 1:
            os.system('cls' if os.name == 'nt' else 'clear')
            print("\033[30;43mFITNESS TRACKER\033[1;0m")
            print("\033[34;47m> Nutrition Help\033[1;0m")
            print("\033[34;47m>> Calorie Intake\033[1;0m\n")
            print(f"You should consume {nutrition.calorie_intake} more calories today\n")
            time.sleep(3)
            os.system('cls' if os.name == 'nt' else 'clear')
        
        elif choice == 2:
            os.system('cls' if os.name == 'nt' else 'clear')
            print("\033[30;43mFITNESS TRACKER\033[1;0m")
            print("\033[34;47m> Nutrition Help\033[1;0m")
            print("\033[34;47m>> Protein Intake\033[1;0m\n")
            print(f"You should consume {nutrition.protein_intake} more grams of protein today\n")
            time.sleep(3)
            os.system('cls' if os.name == 'nt' else 'clear')
        
        elif choice == 3:
            os.system('cls' if os.name == 'nt' else 'clear')
            print("\033[30;43mFITNESS TRACKER\033[1;0m")
            print("\033[34;47m> Nutrition Help\033[1;0m")
            print("\033[34;47m>> Sleeping Hours\033[1;0m\n")
            
            recommended_hours = 9
            hours_slept = 0
            
            print("It is recommended to sleep 9 hours per day.")
            print("\033[33mHow many hours did you sleep?\033[0m\n--> ", end="")
            
            try:
                hours_slept = int(input())
            except ValueError:
                print("\033[31mPlease enter a valid number.\033[0m")
                time.sleep(2)
                continue
            
            nutrition.set_hours_slept(hours_slept)
            
            if nutrition.hours_slept != recommended_hours and nutrition.hours_slept < recommended_hours:
                print(f"\033[31m{user.name}! You don't sleep enough!")
                print(f"You need to sleep {recommended_hours - nutrition.hours_slept} more hours.\033[0m")
            elif nutrition.hours_slept != recommended_hours and nutrition.hours_slept > recommended_hours:
                print(f"\033[31m{user.name}! Don't be lazy! You sleep a lot!")
                print(f"You need to sleep {nutrition.hours_slept - recommended_hours} less hours.\033[0m")
            elif nutrition.hours_slept == recommended_hours:
                print(f"\033[32mGood Job {user.name}! Your sleep schedule is perfect, keep it up!\033[0m")
            
            time.sleep(5)
            os.system('cls' if os.name == 'nt' else 'clear')
        
        elif choice == 4:
            meal_plan_menu(user, nutrition)
        
        elif choice == 5:
            print("\33[31mWarning! The meal plan will be deleted and set empty!!")
            print("Are you sure you want to continue? \33[33m(y/n) \33[0m", end="")
            
            yn = input().lower()
            if yn == 'y':
                nutrition.clear()
            elif yn == 'n':
                os.system('cls' if os.name == 'nt' else 'clear')
        
        elif choice == 0:
            os.system('cls' if os.name == 'nt' else 'clear')
            break
        
        else:
            print("\033[31mX Invalid choice X\033[1;0m")
            print("\033[31mPlease Try Again\033[1;0m")
            time.sleep(2)
            os.system('cls' if os.name == 'nt' else 'clear')

def meal_plan_menu(user: User, nutrition: Nutrition):
    while True:
        os.system('cls' if os.name == 'nt' else 'clear')
        print("\033[30;43mFITNESS TRACKER\033[1;0m")
        print("\033[34;47m> Nutrition Help\033[1;0m")
        print("\033[34;47m>> Meal Plan\033[1;0m\n")
        print("\033[33mChoose one of the following operations:\033[0m")
        print("1. Show all available meals in the system")
        print("2. Add Meal to system")
        print("3. Create Meal Plan")
        print("4. Show Meal plan for the day")
        print("5. Enter what you ate today")
        print("0. \033[31mGo Back\033[0m\n")
        print("--> ", end="")
        
        try:
            choice = int(input())
        except ValueError:
            print("\033[31mX Invalid choice X\033[1;0m")
            print("\033[31mPlease Try Again\033[1;0m")
            time.sleep(2)
            continue
        
        if choice == 1:
            os.system('cls' if os.name == 'nt' else 'clear')
            print("\033[30;43mFITNESS TRACKER\033[1;0m")
            print("\033[34;47m> Nutrition Help\033[1;0m")
            print("\033[34;47m>> Meal Plan\033[1;0m")
            print("\033[34;47m>>> Available Meals\033[1;0m\n")
            nutrition.print_meals()
            print("\033[33mPress 0 to go back: \033[0m", end="")
            while True:
                try:
                    if int(input()) == 0:
                        break
                except ValueError:
                    continue
        
        elif choice == 2:
            os.system('cls' if os.name == 'nt' else 'clear')
            print("\033[30;43mFITNESS TRACKER\033[1;0m")
            print("\033[34;47m> Nutrition Help\033[1;0m")
            print("\033[34;47m>> Meal Plan\033[1;0m")
            print("\033[34;47m>>> Add Meal\033[1;0m\n")
            
            name = input("-Enter Name of the Meal: ")
            calories = int(input("\n-Enter Amount of calories per 100g: "))
            protein = int(input("\n-Enter Amount of Protein per 100g: "))
            
            nutrition.add_meals(name, calories, protein)
            print("Added")
            time.sleep(1)
        
        elif choice == 3:
            os.system('cls' if os.name == 'nt' else 'clear')
            print("\033[30;43mFITNESS TRACKER\033[1;0m")
            print("\033[34;47m> Nutrition Help\033[1;0m")
            print("\033[34;47m>> Meal Plan\033[1;0m")
            print("\033[34;47m>>> Create Meal Plan\033[1;0m\n")
            
            while True:
                print("\033[31mRemember to enter the meals in order of what you will eat first then last\033[0m")
                print("-Choose from the following: ")
                nutrition.print_meals()
                print("-\033[33mEnter the exact Name of the food you want to add to the meal plan: \033[0m", end="")
                food_name = input()
                
                nutrition.add_to_meal_plan(food_name)
                print("-Press 0 to go back, or 1 to add another meal: ", end="")
                
                try:
                    cont = int(input())
                    if cont == 0:
                        break
                except ValueError:
                    continue
        
        elif choice == 4:
            os.system('cls' if os.name == 'nt' else 'clear')
            print("\033[30;43mFITNESS TRACKER\033[1;0m")
            print("\033[34;47m> Nutrition Help\033[1;0m")
            print("\033[34;47m>> Meal Plan\033[1;0m")
            print("\033[34;47m>>> Meal Plan For The Day\033[1;0m\n")
            nutrition.print_meal_plan()
            print("-Enter 0 to go back: ", end="")
            while True:
                try:
                    if int(input()) == 0:
                        os.system('cls' if os.name == 'nt' else 'clear')
                        break
                except ValueError:
                    continue
        
        elif choice == 5:
            what_you_ate_menu(user, nutrition)
        
        elif choice == 0:
            os.system('cls' if os.name == 'nt' else 'clear')
            break
        
        else:
            print("\033[31mX Invalid choice X\033[1;0m")
            print("\033[31mPlease Try Again\033[1;0m")
            time.sleep(2)
            os.system('cls' if os.name == 'nt' else 'clear')

def what_you_ate_menu(user: User, nutrition: Nutrition):
    while True:
        os.system('cls' if os.name == 'nt' else 'clear')
        print("\033[30;43mFITNESS TRACKER\033[1;0m")
        print("\033[34;47m> Nutrition Help\033[1;0m")
        print("\033[34;47m>> Meal Plan\033[1;0m")
        print("\033[34;47m>>> What You ate Today\033[1;0m\n")
        print("1. From Meal Plan")
        print("2. Not From Meal Plan")
        print("0. \033[31mGo Back\033[0m\n")
        print("--> ", end="")
        
        try:
            choice = int(input())
        except ValueError:
            print("\033[31mX Invalid choice X\033[1;0m")
            print("\033[31mPlease Try Again\033[1;0m")
            time.sleep(2)
            continue
        
        if choice == 1:
            os.system('cls' if os.name == 'nt' else 'clear')
            print("\033[30;43mFITNESS TRACKER\033[1;0m")
            print("\033[34;47m> Nutrition Help\033[1;0m")
            print("\033[34;47m>> Meal Plan\033[1;0m")
            print("\033[34;47m>>> What You ate Today\033[1;0m")
            print("\033[34;47m>>>> From Meal Plan\033[1;0m\n")
            
            front_element = nutrition.access_front_element()
            if front_element:
                nutrition.set_remaining_cnp(front_element)
                nutrition.remove_from_meal_plan()
                print("\033[32mUpdating Meal plan and Daily intake\033[0m")
            else:
                print("\033[31mMeal plan is empty\033[0m")
            
            time.sleep(1)
            os.system('cls' if os.name == 'nt' else 'clear')
        
        elif choice == 2:
            os.system('cls' if os.name == 'nt' else 'clear')
            print("\033[30;43mFITNESS TRACKER\033[0m")
            print("\033[34;47m> Nutrition Help\033[0m")
            print("\033[34;47m>> Meal Plan\033[0m")
            print("\033[34;47m>>> What You ate Today\033[0m")
            print("\033[34;47m>>>> Not From Meal Plan\033[0m\n")
            print("Available Meals:")
            
            nutrition.print_meals()
            print("\n-Enter the name of the food: ", end="")
            
            food_name = input()
            nutrition.set_remaining_cnp(food_name)
            print("\033[32mDaily intake updated\n\033[0m")
            time.sleep(1)
            os.system('cls' if os.name == 'nt' else 'clear')
        
        elif choice == 0:
            os.system('cls' if os.name == 'nt' else 'clear')
            break
        
        else:
            print("\033[31mX Invalid choice X\033[1;0m")
            print("\033[31mPlease Try Again\033[1;0m")
            time.sleep(2)
            os.system('cls' if os.name == 'nt' else 'clear')

def workout_plan_menu(user: User, workout: Workout):
    return

def walking_menu(user: User, workout: Workout):
    return

def running_menu(user: User, workout: Workout):
    return

def swimming_menu(user: User, workout: Workout):
    return

def cycling_menu(user: User, workout: Workout):
    return

def gym_training_menu(user: User, workout: Workout):
    return

def main(): # Huvudfunktion som startar programmet
    user = User()
    nutrition = Nutrition(user)
    workout = Workout()
    
    # Welcome meddelande
    print("\033[32mWELCOME to your fitness journey!")
    print("Please enter the below information for us to help you get started!\033[0m\n")
    
    # Register användare
    user.set_name()
    user.set_gender()
    user.set_age()
    user.set_height()
    user.set_weight()
    user.calculate_bmi()

    # Näringsinformation
    nutrition.set_calorie_intake()
    nutrition.set_protein_intake()
    nutrition.set_water_intake()
    

    os.system('cls' if os.name == 'nt' else 'clear')
        
    while True: # Huvudmeny
        print("\033[30;43mFITNESS TRACKER\033[1;0m\n")
        print("\033[33mChoose what you want to do:(enter the number)\033[1;0m")
        print("1. Display Profile")
        print("2. Update Profile")
        print("3. Get Nutrition Help")
        print("4. Get a Workout Plan")
        print("5. Execute Workout")
        print("0. \033[31mExit program\033[0m\n")
        print("--> ", end="")
        
        try:
            choice = int(input())
        except ValueError:
            print("\033[31mX Invalid choice X\033[1;0m")
            print("\033[31mPlease Try Again\033[1;0m")
            time.sleep(2)
            os.system('cls' if os.name == 'nt' else 'clear')
            continue
        
        if choice == 1: # Visa användarprofil
            os.system('cls' if os.name == 'nt' else 'clear')
            print("\033[30;43mFITNESS TRACKER\033[1;0m")
            User.display_profile()
            print("\n\033[33m>>> Press 0 to Continue:\033[0m ", end="")
            input()
            os.system('cls' if os.name == 'nt' else 'clear')
        
        elif choice == 2: # Uppdatera profilmeny
            update_profile_menu(user, nutrition)
        
        elif choice == 3: # Näringshjälpmeny
            nutrition_help_menu(user, nutrition)
        
        elif choice == 4: # Träningsplanmeny
            workout_plan_menu(user, workout)
        
        elif choice == 5:# Utför träning
            os.system('cls' if os.name == 'nt' else 'clear')
            print("\033[30;43mFITNESS TRACKER\033[1;0m")
            print("\033[34;47m>> WORKOUT EXECUTION\033[1;0m\n")
            
            calories_burned = workout.calculate_total_calories_burned_gym()
            nutrition.set_burned_calories(calories_burned)
            
            workout.execute_workout_queue()
        
        elif choice == 0: # Avsluta programmet
            print("\n\033[32mTHANK YOU for using Fitness Tracker.\033[0m")
            print("\033[31mExiting...\033[0m")
            time.sleep(4)
            os.system('cls' if os.name == 'nt' else 'clear')
            break
        
        else:
            print("\033[31mX Invalid choice X\033[1;0m")
            print("\033[31mPlease Try Again\033[1;0m")
            time.sleep(2)
            os.system('cls' if os.name == 'nt' else 'clear')

if __name__ == "__main__":
    main()